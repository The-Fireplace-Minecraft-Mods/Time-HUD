buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = 'sponge'
            url = 'http://repo.spongepowered.org/maven'
        }
        maven {
            name = "Modmuss50"
            url = "http://maven.modmuss50.me/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
        classpath 'org.spongepowered:mixingradle:0.4-SNAPSHOT'
        classpath 'ModsIOUpload:ModsIOUpload:+'
    }
}

plugins {
    id "com.matthewprenger.cursegradle" version "1.0.7"
}
apply plugin: 'net.minecraftforge.gradle.liteloader'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'net.cazzar.gradle.modsio'

version = "!!VERSION!!"
group= "the_fireplace.timehud"
archivesBaseName = "TimeHUD-LiteLoader"

curseforge {
  apiKey = project.curseForgeApiKey
  project {
    id = '239110'
    changelog = file('changelog.txt')
    releaseType = 'beta'
	addGameVersion '1.9'
	addGameVersion 'Java 8'
    mainArtifact(new File(jar.destinationDir, archivesBaseName+"-"+version+".litemod"))
  }
}

modsIO {
    key = project.modsioApiKey
    project{
		artifact = new File(jar.destinationDir, archivesBaseName+"-"+version+".litemod")
		modid = "1228"
		minecraft = "1.9"
		try{changelog = file('changelog.txt').text}catch(Exception e){changelog=""}
		tag = "LiteLoader"
		current = true
    }
}

minecraft {
    version = "1.9"
    mappings = "snapshot_20160410"
    runDir = "run"
}

sourceSets {
    main {
        // Refmap declaration must match the refmap name specified in the json config
        refMap = "mixins.ias.refmap.json"
    }
}

mixin {
    defaultObfuscationEnv notch
}

litemod {
    json {
        name = "Time HUD"
        mcversion = "1.9.0"
        mixinConfigs += "mixins.ias.json"
        author = "The_Fireplace"
        version = project.version
    }
}

jar {
    from litemod.outputs
}

task(renameBuiltMod) << {
	def file = new File(jar.destinationDir, "mod-workspace-"+version+"-mc1.9.litemod")
	if(file.exists())
		file.renameTo(new File(jar.destinationDir, archivesBaseName+"-"+version+".litemod"))
	else{
		def list = []
		jar.destinationDir.eachFileRecurse (groovy.io.FileType.FILES) { file1 ->
			list << file1
		}
		list.each {
			println it.path
		}
	}
}

task(make) << {
	tasks.renameBuiltMod.execute()
	tasks.uploadToModsIO.execute()
}
